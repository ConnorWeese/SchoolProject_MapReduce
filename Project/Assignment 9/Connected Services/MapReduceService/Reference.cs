//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Assignment_9.MapReduceService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MapReduceService.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Map", ReplyAction="http://tempuri.org/IService/MapResponse")]
        System.Tuple<string, int>[] Map(string[] words);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Map", ReplyAction="http://tempuri.org/IService/MapResponse")]
        System.Threading.Tasks.Task<System.Tuple<string, int>[]> MapAsync(string[] words);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Reduce", ReplyAction="http://tempuri.org/IService/ReduceResponse")]
        System.Collections.Generic.Dictionary<string, int> Reduce(System.Tuple<string, int>[] mapped);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Reduce", ReplyAction="http://tempuri.org/IService/ReduceResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> ReduceAsync(System.Tuple<string, int>[] mapped);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Combine", ReplyAction="http://tempuri.org/IService/CombineResponse")]
        System.Collections.Generic.Dictionary<string, int> Combine(System.Collections.Generic.Dictionary<string, int>[] reduced);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Combine", ReplyAction="http://tempuri.org/IService/CombineResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> CombineAsync(System.Collections.Generic.Dictionary<string, int>[] reduced);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MapReduce", ReplyAction="http://tempuri.org/IService/MapReduceResponse")]
        System.Collections.Generic.Dictionary<string, int> MapReduce(string[] words);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/MapReduce", ReplyAction="http://tempuri.org/IService/MapReduceResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> MapReduceAsync(string[] words);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Assignment_9.MapReduceService.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Assignment_9.MapReduceService.IService>, Assignment_9.MapReduceService.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Tuple<string, int>[] Map(string[] words) {
            return base.Channel.Map(words);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<string, int>[]> MapAsync(string[] words) {
            return base.Channel.MapAsync(words);
        }
        
        public System.Collections.Generic.Dictionary<string, int> Reduce(System.Tuple<string, int>[] mapped) {
            return base.Channel.Reduce(mapped);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> ReduceAsync(System.Tuple<string, int>[] mapped) {
            return base.Channel.ReduceAsync(mapped);
        }
        
        public System.Collections.Generic.Dictionary<string, int> Combine(System.Collections.Generic.Dictionary<string, int>[] reduced) {
            return base.Channel.Combine(reduced);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> CombineAsync(System.Collections.Generic.Dictionary<string, int>[] reduced) {
            return base.Channel.CombineAsync(reduced);
        }
        
        public System.Collections.Generic.Dictionary<string, int> MapReduce(string[] words) {
            return base.Channel.MapReduce(words);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> MapReduceAsync(string[] words) {
            return base.Channel.MapReduceAsync(words);
        }
    }
}
